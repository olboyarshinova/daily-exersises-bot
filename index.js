const {google} = require('googleapis');
const TelegramBot = require('node-telegram-bot-api');
const cron = require('node-cron');
const db = require('./database');

const TELEGRAM_BOT_TOKEN = '8196294514:AAEusG4ywhEDhlfksAO4her-aCNl2Z-Z5GY';
const GOOGLE_SHEETS_ID = '1aTH3JD502IqCX2ZG542aHodBTBBG2DzP177aY_zeSZA';
const GOOGLE_CREDENTIALS = require('./single-scholar-395919-2a598adf8152.json');

const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, {polling: true});

bot.setMyCommands([
    {command: '/start', description: '‚ôªÔ∏è  –û–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞'},
    {command: '/settime', description: 'üïó  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'},
    {command: '/today', description: 'üé•  –ü–æ–ª—É—á–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –≤–∏–¥–µ–æ'},
    {command: '/list', description: 'üìã  –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∏–¥–µ–æ'},
    {command: '/help', description: '‚ÑπÔ∏è  –ü–æ–º–æ—â—å'},
]);

const auth = new google.auth.GoogleAuth({
    credentials: GOOGLE_CREDENTIALS,
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
});
const sheets = google.sheets({version: 'v4', auth});

let scheduledTime = '0 7 * * *'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 7:00 —É—Ç—Ä–∞
let scheduledTask = cron.schedule(scheduledTime, () => {
    checkDatesAndSendMessages();
});

async function getSheetData() {
    try {
        const response = await sheets.spreadsheets.values.get({
            spreadsheetId: GOOGLE_SHEETS_ID,
            range: "A:Z",
        });

        if (!response.data.values || response.data.values.length === 0) {
            console.log('–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.');
            return null;
        }

        return response.data.values;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets:', error);
        return null;
    }
}

function transposeData(data) {
    return data[0].map((_, colIndex) => data.map(row => row[colIndex]));
}

function sendMessage(chatId, message) {
    bot.sendMessage(chatId, message);
}

async function checkDatesAndSendMessages() {
    const data = await getSheetData();

    if (!data) {
        console.log('–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã 1.');
        return;
    }

    const transposedData = transposeData(data);
    console.log('–¢—Ä–∞–Ω—Å–ø–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', transposedData);

    const columnNames = transposedData[0];
    console.log('–ù–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫:', columnNames);

    if (!columnNames || columnNames.length === 0) {
        console.log('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.');
        return;
    }

    const rows = data.slice(1);
    console.log('–î–∞–Ω–Ω—ã–µ:', rows);

    // –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "DD.MM"
    const today = new Date().toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
    }).replace(/\./g, '.');

    console.log('–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞:', today);

    for (const row of rows) {
        const date = row[0];
        const time = row[4];
        const url = row[7];


        if (date === today) {
            console.log('–ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ:', url);

            db.all('SELECT chatId FROM users', (err, users) => {
                if (err) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', err);
                    return;
                }

                const videoTime = timeToMilliseconds(time)
                console.log('videoTime', videoTime)

                users.forEach(user => {
                    sendMessage(user.chatId, `–°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –≤–∏–¥–µ–æ: ${url}`);

                    setTimeout(() => {
                        bot.sendMessage(user.chatId, '–í–∏–¥–µ–æ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å. –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:');
                        bot.once('message', async (msg) => {
                            const comment = msg.text;
                            await saveCommentToSheet(msg.from.username, comment);
                            bot.sendMessage(user.chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π!');
                        });
                    }, 3000); // –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ videoTime !!!
                });
            });

            break;
        }
    }
}

function timeToMilliseconds(time) {
    const [hours, minutes] = time.split(':').map(Number);
    const hoursInMs = hours * 3_600_000;
    const minutesInMs = minutes * 60_000;

    return hoursInMs + minutesInMs;
}

async function saveCommentToSheet(userName, comment) {
    console.log(userName, comment)
    try {
        const response = await sheets.spreadsheets.values.append({
            spreadsheetId: GOOGLE_SHEETS_ID,
            range: 'A:Z',
            valueInputOption: 'RAW',
            resource: {
                values: [[userName, comment]],
            },
        });

        console.log('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω:', response.data);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
    }
}

bot.onText(/\/settime (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const time = match[1]; // –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:mm"

    if (!match || !match[1]) {
        bot.sendMessage(chatId, '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:mm", –Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00 –∏–ª–∏ 16:20.');
        return;
    }

    const timePattern = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;

    if (!timePattern.test(time)) {
        bot.sendMessage(chatId, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç HH:mm, –Ω–∞–ø—Ä–∏–º–µ—Ä, 09:00 –∏–ª–∏ 16:20.');
        return;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç cron
    const [hours, minutes] = time.split(':');
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
    scheduledTime = `${minutes} ${hours} * * *`;
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–¥–∞—á—É
    scheduledTask.stop();
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
    scheduledTask = cron.schedule(scheduledTime, () => {
        checkDatesAndSendMessages();
    });

    bot.sendMessage(chatId, `–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ ${time}.`);
});

bot.onText(/\/settime/, (msg, match) => {
    const chatId = msg.chat.id;

    if (match.input === '/settime') {
        bot.sendMessage(chatId, '–£–∫–∞–∂–∏—Ç–µ /settime –≤–º–µ—Å—Ç–µ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:mm", –Ω–∞–ø—Ä–∏–º–µ—Ä, "/settime 09:00".');
    }
});

bot.onText(/\/today/, async (msg) => {
    const chatId = msg.chat.id;
    const data = await getSheetData();

    if (!data) {
        bot.sendMessage(chatId, '–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã 2.');
        return;
    }

    const rows = data.slice(1);

    // –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "DD.MM"
    const today = new Date().toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
    }).replace(/\./g, '.');

    for (const row of rows) {
        const date = row[0];
        const url = row[7];

        if (date === today) {
            bot.sendMessage(chatId, `–°–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –≤–∏–¥–µ–æ: ${url}`);
            return;
        }
    }

    bot.sendMessage(chatId, '–ù–∞ —Å–µ–≥–æ–¥–Ω—è –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
});

bot.onText(/\/list/, async (msg) => {
    const chatId = msg.chat.id;
    const data = await getSheetData();

    if (!data) {
        bot.sendMessage(chatId, '–î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã.');
        return;
    }

    const rows = data.slice(1);

    // –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "DD.MM"
    const today = new Date();
    const todayFormatted = today.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
    }).replace(/\./g, '.');

    let table = '```\n';
    table += '| –î–∞—Ç–∞  | –í—Ä–µ–º—è |   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ   |\n';
    table += '|-------|-------|-----------------|\n';

    for (const row of rows) {
        const date = row[0];
        const time = row[4];
        const type = row[5];

        if (!/^\d{2}\.\d{2}$/.test(date)) {
            console.error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: ${date}`);
            continue;
        }

        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –¥–∞—Ç—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ (–±–µ–∑ —É—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏)
        const [day, month] = date.split('.');
        const [todayDay, todayMonth] = todayFormatted.split('.');

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –≤ —á–∏—Å–ª–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        const rowDateNumber = parseInt(month + day, 10); // MMDD
        const todayDateNumber = parseInt(todayMonth + todayDay, 10); // MMDD

        if (rowDateNumber >= todayDateNumber) {
            table += `| ${date.padEnd(5, ' ')} | ${time.padEnd(5, ' ')} | ${type.padEnd(15, ' ')} |\n`;
        }
    }

    table += '```';

    bot.sendMessage(chatId, table, {parse_mode: 'Markdown'});
});

bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    const username = msg.from.username;
    const firstName = msg.from.first_name;
    const lastName = msg.from.last_name;

    db.run(
        'INSERT OR IGNORE INTO users (chatId, username, firstName, lastName) VALUES (?, ?, ?, ?)',
        [chatId, username, firstName, lastName],
        (err) => {
            if (err) {
                console.error('err 1', err.message);
                return bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö.');
            }

            console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`);

            bot.sendMessage(
                chatId,
                `–ü—Ä–∏–≤–µ—Ç, ${firstName}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /settime HH:mm –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –í—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7:00`,
            );
        }
    );
});

bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    const helpText = `
        –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        /start - –ó–∞–ø—É—Å—Ç–∏—Ç—å/–æ–±–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
        /settime HH:mm - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        /today - –ü–æ–ª—É—á–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–µ –≤–∏–¥–µ–æ
        /list - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∏–¥–µ–æ
        /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    `;
    bot.sendMessage(chatId, helpText);
});

bot.onText(/\/me/, (msg) => {
    const chatId = msg.chat.id;

    db.get('SELECT * FROM users WHERE chatId = ?', [chatId], (err, row) => {
        if (err) {
            return console.error('err 2', err.message);
        }

        if (row) {
            bot.sendMessage(chatId, `–í–∞—à username: ${row.username}`);
        } else {
            bot.sendMessage(chatId, '–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.');
        }
    });
});
